pipeline {
    agent { label 'devsecops-demo-private-jenkins-slave' }
    environment {
        TAG_VERSION = '1.0.0'
        REGISTRY_PATH = '277565952452.dkr.ecr.ap-southeast-1.amazonaws.com'
        ECR_REPO_FULL_NAME = '277565952452.dkr.ecr.ap-southeast-1.amazonaws.com/devsecops-demo-ecr'
        WAR_FULL_PATH = '/home/ec2-user/workspace/ci-pipeline/target/devsecops-demo-project.war'
        TMP_IMAGE_NAME = 'devsecops-demo-java-app'
        ECR_REPO_NAME = 'devsecops-demo-ecr'
    }
    /*options {
        // Timeout counter starts AFTER agent is allocated
        timeout(time: 1, unit: 'SECONDS')
    }*/
    stages {
          stage("Maven Build and Sonarqube Analysis") {
            steps {
              withSonarQubeEnv('devsecops-demo-sonarqube-server') {
                sh 'mvn clean install sonar:sonar'
              }
            }
          }
          stage("Sonarqube Quality Gate") {
            steps {
              timeout(time: 3, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
          stage('Docker Build') {
            steps {
              sh 'cp ${WAR_FULL_PATH} .'
              sh 'docker build -t ${TMP_IMAGE_NAME}:${TAG_VERSION} .'
            }
          }
          stage('Docker Tag and Push to ECR') {
            steps {
              sh '''
              aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${REGISTRY_PATH}
              export IMAGE_ID=$(sudo docker images --filter=reference=devsecops-demo-java-app --format "{{.ID}}")
              echo $IMAGE_ID
              docker tag ${IMAGE_ID} ${REGISTRY_PATH}/${ECR_REPO_NAME}:${TAG_VERSION}
              docker push ${ECR_REPO_FULL_NAME}:${TAG_VERSION}
              '''
            }
          }
          stage('Docker ECR Scan') {
            steps {
              sh '''
              export IMAGE_DIGEST=$(aws ecr describe-images --repository-name devsecops-demo-ecr --filter tagStatus=TAGGED --query 'imageDetails[*].imageDigest' --output text)
              aws ecr start-image-scan \
                     --repository-name ${ECR_REPO_NAME} \
                    --image-id imageDigest=${IMAGE_DIGEST}
              '''      
            }
          }
    }
}